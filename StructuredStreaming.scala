/* This Code reads the stream data from Kafka topic and checks if the log record has any malicious IP or URL */

import org.apache.spark.sql._
import org.apache.spark.sql.functions._
import org.apache.spark.sql.streaming._
import org.apache.spark.sql.types._
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.DataFrame
import java.sql.Timestamp


case class randomLog(
                      remote_ip: String,
                      time_received_isoformat: java.sql.Timestamp,
                      time_received_tz_isoformat: String,
                      time_us: String,
                      request_first_line: String,
                      request_method: String,
                      request_url: String,
                      request_http_ver: String,
                      request_url_path: String,
                      status: String,
                      response_bytes_clf: String,
                      request_header_referer: String,
                      request_header_user_agent: String,
                      request_header_user_agent__browser__family: String,
                      request_header_user_agent__browser__version_string: String,
                      request_header_user_agent__os__family: String,
                      request_header_user_agent__os__version_string: String,
                      request_header_user_agent__is_mobile: String,
                      id: String
                    )

object randomLog {
  val randomLogSchema: StructType = Encoders.product[randomLog].schema
}

object StreamHandler {
  def main(args: Array[String]) {

    val spark = SparkSession.builder
      .appName("Stream Handler")
      .config(
        "spark.jars",
        "/home/kartheek_surampalli1/StructuredStreaming/target/scala-2.12/structured-streaming_2.12-1.0.jar"
      )
      .config(
        "spark.driver.extraClassPath",
        "/home/kartheek_surampalli1/postgresql-42.3.1.jar"
      )
      .getOrCreate()

    def sourceKafkaOptions: Map[String, String] = Map(
      "kafka.bootstrap.servers" -> "ec2-18-117-195-81.us-east-2.compute.amazonaws.com:9092",
      "subscribe" -> "access-log-topic"
    )

    def JdbcOptions(DBname:String): Map[String, String] = Map(
      "dbtable" -> DBname,
      "user" -> "kartheek_surampalli1",
      "password" -> "Karni0710!",
      "driver" -> "org.postgresql.Driver",
      "url" -> "jdbc:postgresql://35.236.36.122/MRP"
    )

    def readStreamLogKafka(spark: SparkSession): Dataset[randomLog] = {
      import spark.implicits._
      spark.readStream
        .format("kafka")
        .options(sourceKafkaOptions)
        .load()
        .selectExpr("cast(value as string) as value")
        .select(
          from_json(col("value"), randomLog.randomLogSchema).as[randomLog]
        )
    }

    def writeStreamToJdbc(
                           dataset: Dataset[randomLog],
                           mode: SaveMode = SaveMode.Append
                         ) = {
      dataset.writeStream
        .foreachBatch { (batch: Dataset[randomLog], _: Long) =>
          batch
            .withColumn("time_us", col("time_us").cast(IntegerType))
            .write
            .format("jdbc")
            .options(JdbcOptions("malicious_log_records"))
            .mode(mode)
            .save()
        }
        .option("checkpointLocation", "/user/kartheek_surampalli1/access-log-checkpoint")
        .start()
        .awaitTermination()
    }

    def staticMaliciousIPs:DataFrame = {
      spark.read
        .format("jdbc")
        .options(JdbcOptions("static_malicious_ips"))
        .load()
    }
    def staticMaliciousUrls:DataFrame = {
      spark.read
        .format("jdbc")
        .options(JdbcOptions("static_malicious_urls"))
        .load()
    }

    val randomLogDataset: Dataset[randomLog] = readStreamLogKafka(spark)

    val maliciousUrls = staticMaliciousUrls.select("malicious_url").collect().map(_(0)).toList
    val maliciousIps = staticMaliciousIPs.select("malicious_ip").collect().map(_(0)).toList


    writeStreamToJdbc(randomLogDataset
      .filter(col("remote_ip").isInCollection(maliciousIps) || col("request_url").isInCollection(maliciousUrls)))
  }

}


