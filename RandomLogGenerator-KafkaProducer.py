# Python Code to generate Random Access Log in Apache format and push the log record to Kafka hosted on AWS EC2
#!/usr/bin/python
from ensurepip import bootstrap
import time
import datetime
import uuid
import pytz
import numpy
import random
import argparse
from faker import Faker
from random import randrange
import sys
import apache_log_parser
import json
from kafka import KafkaProducer

class switch(object):
    def __init__(self, value):
        self.value = value
        self.fail = False

    def __iter__(self):
        yield self.match
        raise StopIteration

    def match(self, *args):
        if self.fail or not args:
            return True
        elif self.value in args: 
            self.fail = True
            return True
        else:
            return False

parser = argparse.ArgumentParser(__file__, description="Random Access Log Generator-Apache")
parser.add_argument("--num", "-n", dest='num_lines', help="Number of lines to generate (0 for infinite)", type=int, default=1)
parser.add_argument("--sleep", "-s",dest='sleep_sec',help="Sleep this long between lines (in seconds)", default=0.0, type=float)
args = parser.parse_args()
log_lines = args.num_lines
sleep_time = args.sleep_sec

faker = Faker()

timestr = time.strftime("%Y%m%d-%H%M%S")
otime = datetime.datetime.now()
response=["200","404","500","301"]
verb=["GET","POST","DELETE","PUT"]
resources=["/list","/sc-content","/sc-admin","/explore","/search/home/list","/app/main/posts","/posts/search/explore",
"/apps/cart.jsp?appID="]
ualist = [faker.firefox, faker.chrome, faker.safari, faker.internet_explorer, faker.opera,]
parser_format = '%a - - %t %D "%r" %s %b "%{Referer}i" "%{User-Agent}i"'
line_parser = apache_log_parser.make_parser(parser_format)

dict_filter = lambda x, y: dict([ (i,x[i]) for i in x if i in set(y) ])
producer = KafkaProducer(bootstrap_servers = '18.216.84.21:9092' )
Final_Keys = (
'remote_ip', 'time_received_isoformat', 'time_received_tz_isoformat', 'time_us', 'request_first_line', 'request_method', 'request_url', 
'request_http_ver', 'request_url_path', 'status', 'response_bytes_clf', 'request_header_referer', 'request_header_user_agent', 
'request_header_user_agent__browser__family', 'request_header_user_agent__browser__version_string','request_header_user_agent__os__family',
'request_header_user_agent__os__version_string', 'request_header_user_agent__is_mobile', 'id')

flag = True
while (flag):
        elapsed_us = random.randint(1 * 1000,1000 * 1000) 
        seconds=random.randint(30,300)
        increment = datetime.timedelta(seconds=seconds)
        otime += increment

        ip = faker.ipv4()
        dt = otime.strftime('%d/%b/%Y:%H:%M:%S')
        tz = datetime.datetime.now(pytz.timezone('US/Pacific')).strftime('%z')
        vrb = numpy.random.choice(verb,p=[0.6,0.1,0.1,0.2])

        uri = random.choice(resources)
        if uri.find("apps")>0:
                uri += str(random.randint(1000,10000))

        resp = numpy.random.choice(response,p=[0.9,0.04,0.02,0.04])
        byt = int(random.gauss(6000,60))
        referer = faker.uri()
        useragent = numpy.random.choice(ualist,p=[0.5,0.3,0.1,0.05,0.05] )()        
        line = '%s - - [%s %s] %s "%s %s HTTP/1.0" %s %s "%s" "%s" \n' % (ip,dt,tz,elapsed_us,vrb,uri,resp,byt,referer,useragent)
        Json_dict_parsed = line_parser(line)
        Json_dict_parsed['id'] = str(uuid.uuid4())
        Json_dict_parsed = {k.lower() : v for k, v in Json_dict_parsed.items() if not k.endswith('datetimeobj')}
        print(json.dumps(dict_filter(Json_dict_parsed,Final_Keys)))
        producer.send('Kafka-Python-Test4', bytes(json.dumps(dict_filter(Json_dict_parsed,Final_Keys)),encoding='utf-8'))
        if flag and sleep_time > 0  :
            time.sleep(sleep_time)

        log_lines = log_lines - 1
        flag = False if log_lines == 0 else True
        

